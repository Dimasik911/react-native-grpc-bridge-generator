// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`creates multiple nested messages sample output 1`] = `
"#import \\"GrpcServiceBridgeModule.h\\"
#import <GRPCClient/GRPCCall+Tests.h>
#import \\"GrpcService.pbrpc.h\\"
#import <react/RCTConvert.h>

@implementation GrpcServiceBridgeModule

GrpcService *_service;

- (instancetype)initWithHost:(NSString *)host {
  if (self = [super init]) {
    [GRPCCall useInsecureConnectionsForHost:host];

    _service = [[GrpcService alloc] initWithHost:host];
  }

  return self;
}

RCT_EXPORT_MODULE(GrpcServiceBridgeModule);

static inline NSDictionary* mapCoordinate(Coordinate* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng)
  };
}

static inline NSDictionary* mapLocation(Location* obj) {
  return @{
    @\\"coordinate\\": mapCoordinate(obj.coordinate),
    @\\"addressString\\": obj.addressString ?: [NSNull null]
  };
}

static inline NSDictionary* mapSearchPlacesRequest(SearchPlacesRequest* obj) {
  return @{
    @\\"coordinate\\": mapCoordinate(obj.coordinate),
    @\\"query\\": obj.query ?: [NSNull null]
  };
}

static inline NSDictionary* mapSearchLocationsRequest(SearchLocationsRequest* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng)
  };
}

static inline NSDictionary* mapPlaces(Places* obj) {
  return @{
    @\\"locations\\": mapLocations(obj.locationsArray)
  };
}

static inline SearchPlacesRequest* mapToGRPCSearchPlacesRequest(NSDictionary* input) {
  SearchPlacesRequest *output = [[SearchPlacesRequest alloc] init];

    output.query = [RCTConvert NSString:input[@\\"query\\"]];
  return output;
}

static inline SearchLocationsRequest* mapToGRPCSearchLocationsRequest(NSDictionary* input) {
  SearchLocationsRequest *output = [[SearchLocationsRequest alloc] init];
    output.lat = [[RCTConvert NSNumber:input[@\\"lat\\"]] doubleValue];
    output.lng = [[RCTConvert NSNumber:input[@\\"lng\\"]] doubleValue];
  return output;
}

RCT_EXPORT_METHOD(searchPlaces:(NSDictionary *)input
  resolver:(RCTPromiseResolveBlock) resolve
  rejecter:(RCTPromiseRejectBlock) reject) {
  [_service searchPlacesWithRequest:mapToGRPCSearchPlacesRequest(input) handler:^(Places *response, NSError *error) {
    if (error) {
      reject([@(error.code) stringValue], error.description, error);
      return;
    }

    NSLog(@\\"native SearchPlaces: %@\\", response);

    resolve(mapPlaces(response));
  }];
}

RCT_EXPORT_METHOD(searchLocations:(NSDictionary *)input
  resolver:(RCTPromiseResolveBlock) resolve
  rejecter:(RCTPromiseRejectBlock) reject) {
  [_service searchLocationsWithRequest:mapToGRPCSearchLocationsRequest(input) handler:^(Location *response, NSError *error) {
    if (error) {
      reject([@(error.code) stringValue], error.description, error);
      return;
    }

    NSLog(@\\"native SearchLocations: %@\\", response);

    resolve(mapLocation(response));
  }];
}


@end"
`;

exports[`creates multiple service sample output 1`] = `
"#import \\"GrpcServiceBridgeModule.h\\"
#import <GRPCClient/GRPCCall+Tests.h>
#import \\"GrpcService.pbrpc.h\\"
#import <react/RCTConvert.h>

@implementation GrpcServiceBridgeModule

GrpcService *_service;

- (instancetype)initWithHost:(NSString *)host {
  if (self = [super init]) {
    [GRPCCall useInsecureConnectionsForHost:host];

    _service = [[GrpcService alloc] initWithHost:host];
  }

  return self;
}

RCT_EXPORT_MODULE(GrpcServiceBridgeModule);

static inline NSDictionary* mapLocation(Location* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng),
    @\\"addressString\\": obj.addressString ?: [NSNull null]
  };
}

static inline NSDictionary* mapSearchPlacesRequest(SearchPlacesRequest* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng),
    @\\"query\\": obj.query ?: [NSNull null]
  };
}

static inline NSDictionary* mapSearchLocationsRequest(SearchLocationsRequest* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng)
  };
}

static inline NSDictionary* mapPlaces(Places* obj) {
  return @{
    @\\"Locations\\": mapLocations(obj.LocationsArray)
  };
}

static inline SearchPlacesRequest* mapToGRPCSearchPlacesRequest(NSDictionary* input) {
  SearchPlacesRequest *output = [[SearchPlacesRequest alloc] init];
    output.lat = [[RCTConvert NSNumber:input[@\\"lat\\"]] doubleValue];
    output.lng = [[RCTConvert NSNumber:input[@\\"lng\\"]] doubleValue];
    output.query = [RCTConvert NSString:input[@\\"query\\"]];
  return output;
}

static inline SearchLocationsRequest* mapToGRPCSearchLocationsRequest(NSDictionary* input) {
  SearchLocationsRequest *output = [[SearchLocationsRequest alloc] init];
    output.lat = [[RCTConvert NSNumber:input[@\\"lat\\"]] doubleValue];
    output.lng = [[RCTConvert NSNumber:input[@\\"lng\\"]] doubleValue];
  return output;
}

RCT_EXPORT_METHOD(searchPlaces:(NSDictionary *)input
  resolver:(RCTPromiseResolveBlock) resolve
  rejecter:(RCTPromiseRejectBlock) reject) {
  [_service searchPlacesWithRequest:mapToGRPCSearchPlacesRequest(input) handler:^(Places *response, NSError *error) {
    if (error) {
      reject([@(error.code) stringValue], error.description, error);
      return;
    }

    NSLog(@\\"native SearchPlaces: %@\\", response);

    resolve(mapPlaces(response));
  }];
}

RCT_EXPORT_METHOD(searchLocations:(NSDictionary *)input
  resolver:(RCTPromiseResolveBlock) resolve
  rejecter:(RCTPromiseRejectBlock) reject) {
  [_service searchLocationsWithRequest:mapToGRPCSearchLocationsRequest(input) handler:^(Location *response, NSError *error) {
    if (error) {
      reject([@(error.code) stringValue], error.description, error);
      return;
    }

    NSLog(@\\"native SearchLocations: %@\\", response);

    resolve(mapLocation(response));
  }];
}


@end"
`;

exports[`creates nested sample output 1`] = `
"#import \\"GrpcServiceBridgeModule.h\\"
#import <GRPCClient/GRPCCall+Tests.h>
#import \\"GrpcService.pbrpc.h\\"
#import <react/RCTConvert.h>

@implementation GrpcServiceBridgeModule

GrpcService *_service;

- (instancetype)initWithHost:(NSString *)host {
  if (self = [super init]) {
    [GRPCCall useInsecureConnectionsForHost:host];

    _service = [[GrpcService alloc] initWithHost:host];
  }

  return self;
}

RCT_EXPORT_MODULE(GrpcServiceBridgeModule);

static inline NSDictionary* mapLocation(Location* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng),
    @\\"addressString\\": obj.addressString ?: [NSNull null]
  };
}

static inline NSDictionary* mapSearchPlacesRequest(SearchPlacesRequest* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng),
    @\\"query\\": obj.query ?: [NSNull null]
  };
}

static inline NSMutableArray* mapLocations(NSMutableArray* input) {
  NSMutableArray *output = [[NSMutableArray alloc] init];
  for (Location *obj in input) {
    [output addObject: mapLocation(obj)];
  }

  return output;
}


static inline NSDictionary* mapPlaces(Places* obj) {
  return @{
    @\\"Locations\\": mapLocations(obj.LocationsArray)
  };
}

static inline SearchPlacesRequest* mapToGRPCSearchPlacesRequest(NSDictionary* input) {
  SearchPlacesRequest *output = [[SearchPlacesRequest alloc] init];
    output.lat = [[RCTConvert NSNumber:input[@\\"lat\\"]] doubleValue];
    output.lng = [[RCTConvert NSNumber:input[@\\"lng\\"]] doubleValue];
    output.query = [RCTConvert NSString:input[@\\"query\\"]];
  return output;
}

RCT_EXPORT_METHOD(searchPlaces:(NSDictionary *)input
  resolver:(RCTPromiseResolveBlock) resolve
  rejecter:(RCTPromiseRejectBlock) reject) {
  [_service searchPlacesWithRequest:mapToGRPCSearchPlacesRequest(input) handler:^(Places *response, NSError *error) {
    if (error) {
      reject([@(error.code) stringValue], error.description, error);
      return;
    }

    NSLog(@\\"native SearchPlaces: %@\\", response);

    resolve(mapPlaces(response));
  }];
}


@end"
`;

exports[`creates sample output 1`] = `
"#import \\"GrpcServiceBridgeModule.h\\"
#import <GRPCClient/GRPCCall+Tests.h>
#import \\"GrpcService.pbrpc.h\\"
#import <react/RCTConvert.h>

@implementation GrpcServiceBridgeModule

GrpcService *_service;

- (instancetype)initWithHost:(NSString *)host {
  if (self = [super init]) {
    [GRPCCall useInsecureConnectionsForHost:host];

    _service = [[GrpcService alloc] initWithHost:host];
  }

  return self;
}

RCT_EXPORT_MODULE(GrpcServiceBridgeModule);

static inline NSDictionary* mapReverseGeocodeRequest(ReverseGeocodeRequest* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng)
  };
}

static inline NSDictionary* mapLocation(Location* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng),
    @\\"addressString\\": obj.addressString ?: [NSNull null]
  };
}

static inline ReverseGeocodeRequest* mapToGRPCReverseGeocodeRequest(NSDictionary* input) {
  ReverseGeocodeRequest *output = [[ReverseGeocodeRequest alloc] init];
    output.lat = [[RCTConvert NSNumber:input[@\\"lat\\"]] doubleValue];
    output.lng = [[RCTConvert NSNumber:input[@\\"lng\\"]] doubleValue];
  return output;
}

RCT_EXPORT_METHOD(reverseGeocode:(NSDictionary *)input
  resolver:(RCTPromiseResolveBlock) resolve
  rejecter:(RCTPromiseRejectBlock) reject) {
  [_service reverseGeocodeWithRequest:mapToGRPCReverseGeocodeRequest(input) handler:^(Location *response, NSError *error) {
    if (error) {
      reject([@(error.code) stringValue], error.description, error);
      return;
    }

    NSLog(@\\"native ReverseGeocode: %@\\", response);

    resolve(mapLocation(response));
  }];
}


@end"
`;

exports[`creates sample output with classPrefix 1`] = `
"#import \\"GrpcServiceBridgeModule.h\\"
#import <GRPCClient/GRPCCall+Tests.h>
#import \\"GrpcService.pbrpc.h\\"
#import <react/RCTConvert.h>

@implementation GrpcServiceBridgeModule

GrpcService *_service;

- (instancetype)initWithHost:(NSString *)host {
  if (self = [super init]) {
    [GRPCCall useInsecureConnectionsForHost:host];

    _service = [[GrpcService alloc] initWithHost:host];
  }

  return self;
}

RCT_EXPORT_MODULE(GrpcServiceBridgeModule);

static inline NSDictionary* mapDRIReverseGeocodeRequest(DRIReverseGeocodeRequest* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng)
  };
}

static inline NSDictionary* mapDRILocation(DRILocation* obj) {
  return @{
    @\\"lat\\": @(obj.lat),
    @\\"lng\\": @(obj.lng),
    @\\"addressString\\": obj.addressString ?: [NSNull null]
  };
}

static inline DRIReverseGeocodeRequest* mapToGRPCDRIReverseGeocodeRequest(NSDictionary* input) {
  DRIReverseGeocodeRequest *output = [[DRIReverseGeocodeRequest alloc] init];
    output.lat = [[RCTConvert NSNumber:input[@\\"lat\\"]] doubleValue];
    output.lng = [[RCTConvert NSNumber:input[@\\"lng\\"]] doubleValue];
  return output;
}

RCT_EXPORT_METHOD(reverseGeocode:(NSDictionary *)input
  resolver:(RCTPromiseResolveBlock) resolve
  rejecter:(RCTPromiseRejectBlock) reject) {
  [_service reverseGeocodeWithRequest:mapToGRPCDRIReverseGeocodeRequest(input) handler:^(DRILocation *response, NSError *error) {
    if (error) {
      reject([@(error.code) stringValue], error.description, error);
      return;
    }

    NSLog(@\\"native DRIReverseGeocode: %@\\", response);

    resolve(mapDRILocation(response));
  }];
}


@end"
`;
